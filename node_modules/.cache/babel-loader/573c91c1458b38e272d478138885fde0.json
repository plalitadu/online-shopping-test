{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pare\\\\Development\\\\React\\\\11-FoodOrderApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADDITEM\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    console.log(existingCartItemIndex, existingCartItem);\n    const updatedItems = state.items.concat(action.item);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCart({\n      type: \"ADDITEM\",\n      item: item\n    });\n    console.log(item, \"cartcontext\");\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCart({\n      type: \"REMOVEITEM\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"ZY2kzjH0eT2UJ8xdytMWU1wIqqA=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","console","log","updatedItems","concat","CartProvider","props","cartState","dispatchCart","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B;AAIH,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,qBAAZ,EAAkCG,gBAAlC;AACG,UAAMG,YAAY,GAAGb,KAAK,CAACH,KAAN,CAAYiB,MAAZ,CAAmBb,MAAM,CAACG,IAA1B,CAArB;AAEA,WAAO;AACLP,MAAAA,KAAK,EAAEgB,YADF;AAELf,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,SAAOP,gBAAP;AACD,CAjBD;;AAmBA,MAAMmB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BxB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAA5C;;AAEA,QAAMuB,oBAAoB,GAAIf,IAAD,IAAU;AACrCc,IAAAA,YAAY,CAAC;AAAEhB,MAAAA,IAAI,EAAE,SAAR;AAAmBE,MAAAA,IAAI,EAAEA;AAAzB,KAAD,CAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EAAkB,aAAlB;AACD,GAHD;;AAKA,QAAMgB,yBAAyB,GAAIX,EAAD,IAAQ;AACxCS,IAAAA,YAAY,CAAC;AAAEhB,MAAAA,IAAI,EAAE,YAAR;AAAsBO,MAAAA,EAAE,EAAEA;AAA1B,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAMY,WAAW,GAAG;AAClBxB,IAAAA,KAAK,EAAEoB,SAAS,CAACpB,KADC;AAElBC,IAAAA,WAAW,EAAEmB,SAAS,CAACnB,WAFL;AAGlBwB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBD;;GAAMT,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADDITEM\") {\r\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n\t\t\r\n\tconst existingCartItem = state.items[existingCartItemIndex];\r\n\tconsole.log(existingCartItemIndex,existingCartItem);\r\n    const updatedItems = state.items.concat(action.item);\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCart({ type: \"ADDITEM\", item: item });\r\n    console.log(item, \"cartcontext\");\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCart({ type: \"REMOVEITEM\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}