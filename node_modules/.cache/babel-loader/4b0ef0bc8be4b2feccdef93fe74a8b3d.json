{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const enteredValueIsValid = validateValue(enteredValue);\n  const inputHasError = !enteredValueIsValid && isTouched;\n\n  const valueInputHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const valueInputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    valueIsValid: enteredValueIsValid,\n    inputHasError,\n    valueInputHandler,\n    valueInputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","enteredValueIsValid","inputHasError","valueInputHandler","event","target","value","valueInputBlurHandler","reset","valueIsValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,mBAAmB,GAAGL,aAAa,CAACC,YAAD,CAAzC;AACA,QAAMK,aAAa,GAAG,CAACD,mBAAD,IAAwBF,SAA9C;;AAEA,QAAMI,iBAAiB,GAAIC,KAAD,IAAW;AACnCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAIA,QAAMC,qBAAqB,GAAIH,KAAD,IAAW;AACvCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAK;AACfV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAM;AACJM,IAAAA,KAAK,EAAET,YADH;AAEJY,IAAAA,YAAY,EAAGR,mBAFX;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,iBAJI;AAKJI,IAAAA,qBALI;AAMJC,IAAAA;AANI,GAAN;AAQD,CA5BD;;GAAMb,Q;;AA8BN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const enteredValueIsValid = validateValue(enteredValue);\r\n  const inputHasError = !enteredValueIsValid && isTouched;\r\n\r\n  const valueInputHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const valueInputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () =>{\r\n      setEnteredValue('');\r\n      setIsTouched(false);\r\n  }\r\n\r\n  return{\r\n    value: enteredValue,\r\n    valueIsValid : enteredValueIsValid,\r\n    inputHasError,\r\n    valueInputHandler,\r\n    valueInputBlurHandler,\r\n    reset\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n"]},"metadata":{},"sourceType":"module"}