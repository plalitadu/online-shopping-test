{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pare\\\\Development\\\\React\\\\11-FoodOrderApp\\\\src\\\\component\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"../UI/Modal\";\nimport classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\"; // import classes from './Modal.module.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    valueIsValid: enteredNameIsValid,\n    inputHasError: nameInputIsInvalid,\n    valueInputHandler: nameInputHandler,\n    valueInputBlurHandler: nameInputOnblurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredStreet,\n    valueIsValid: enteredStreetIsValid,\n    inputHasError: streetInputIsInvalid,\n    valueInputHandler: streetInputHandler,\n    valueInputBlurHandler: streetInputOnblurHandler,\n    reset: resetStreetInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredPostcode,\n    valueIsValid: enteredPostcodeIsValid,\n    inputHasError: postcodeInputIsInvalid,\n    valueInputHandler: postcodeInputHandler,\n    valueInputBlurHandler: postcodeInputOnblurHandler,\n    reset: resetPostcodeInput\n  } = useInput(value => !isNaN(value) && parseInt(Number(value)) == value && !isNaN(parseInt(value, 10)));\n  const {\n    value: enteredCity,\n    valueIsValid: enteredCityIsValid,\n    inputHasError: cityInputIsInvalid,\n    valueInputHandler: cityInputHandler,\n    valueInputBlurHandler: cityInputOnblurHandler,\n    reset: resetCityInput\n  } = useInput(value => value.trim() !== \"\"); //   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\"\n  //   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\n\n  let formIsInvalid = false;\n\n  if (enteredNameIsValid && enteredStreetIsValid && enteredPostcodeIsValid && enteredCityIsValid) {\n    formIsInvalid = true;\n  }\n\n  const confirmHandler = event => {\n    event.preventDefault();\n\n    if (!nameInputIsInvalid) {\n      return;\n    }\n\n    resetNameInput();\n    resetStreetInput();\n    resetPostcodeInput();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputOnblurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Name must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetInputHandler,\n        onBlur: streetInputOnblurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), streetInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Street must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postalCode\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postalCode\",\n        onChange: postcodeInputHandler,\n        onBlur: postcodeInputOnblurHandler,\n        value: enteredPostcode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), postcodeInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Postcode must not empty & should be integer.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityInputHandler,\n        onBlur: cityInputOnblurHandler,\n        value: enteredCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), cityInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"City must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: props.onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !formIsInvalid,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"hw8BG2qtliAN2lzdpG1oyL15ePM=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/component/Cart/Checkout.js"],"names":["useState","Modal","classes","useInput","Checkout","props","value","enteredName","valueIsValid","enteredNameIsValid","inputHasError","nameInputIsInvalid","valueInputHandler","nameInputHandler","valueInputBlurHandler","nameInputOnblurHandler","reset","resetNameInput","trim","enteredStreet","enteredStreetIsValid","streetInputIsInvalid","streetInputHandler","streetInputOnblurHandler","resetStreetInput","enteredPostcode","enteredPostcodeIsValid","postcodeInputIsInvalid","postcodeInputHandler","postcodeInputOnblurHandler","resetPostcodeInput","isNaN","parseInt","Number","enteredCity","enteredCityIsValid","cityInputIsInvalid","cityInputHandler","cityInputOnblurHandler","resetCityInput","formIsInvalid","confirmHandler","event","preventDefault","control","onCancel"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Modal from \"../UI/Modal\";\r\nimport classes from \"./Checkout.module.css\";\r\nimport useInput from \"../../hooks/use-input\";\r\n// import classes from './Modal.module.css';\r\n\r\nconst Checkout = (props) => {\r\n  const {\r\n    value: enteredName,\r\n    valueIsValid: enteredNameIsValid,\r\n    inputHasError: nameInputIsInvalid,\r\n    valueInputHandler: nameInputHandler,\r\n    valueInputBlurHandler: nameInputOnblurHandler,\r\n    reset: resetNameInput,\r\n  } = useInput((value) => value.trim() !== \"\");\r\n\r\n  const {\r\n    value: enteredStreet,\r\n    valueIsValid: enteredStreetIsValid,\r\n    inputHasError: streetInputIsInvalid,\r\n    valueInputHandler: streetInputHandler,\r\n    valueInputBlurHandler: streetInputOnblurHandler,\r\n    reset: resetStreetInput,\r\n  } = useInput((value) => value.trim() !== \"\");\r\n\r\n  const {\r\n    value: enteredPostcode,\r\n    valueIsValid: enteredPostcodeIsValid,\r\n    inputHasError: postcodeInputIsInvalid,\r\n    valueInputHandler: postcodeInputHandler,\r\n    valueInputBlurHandler: postcodeInputOnblurHandler,\r\n    reset: resetPostcodeInput,\r\n  } = useInput(\r\n    (value) =>\r\n      !isNaN(value) &&\r\n      parseInt(Number(value)) == value &&\r\n      !isNaN(parseInt(value, 10))\r\n  );\r\n\r\n  const {\r\n    value: enteredCity,\r\n    valueIsValid: enteredCityIsValid,\r\n    inputHasError: cityInputIsInvalid,\r\n    valueInputHandler: cityInputHandler,\r\n    valueInputBlurHandler: cityInputOnblurHandler,\r\n    reset: resetCityInput,\r\n  } = useInput((value) => value.trim() !== \"\");\r\n\r\n  //   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\"\r\n  //   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\r\n\r\n  let formIsInvalid = false;\r\n  if (\r\n    enteredNameIsValid &&\r\n    enteredStreetIsValid &&\r\n    enteredPostcodeIsValid &&\r\n    enteredCityIsValid\r\n  ) {\r\n    formIsInvalid = true;\r\n  }\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n    if (!nameInputIsInvalid) {\r\n      return;\r\n    }\r\n    resetNameInput();\r\n    resetStreetInput();\r\n    resetPostcodeInput();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={confirmHandler}>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameInputHandler}\r\n          onBlur={nameInputOnblurHandler}\r\n          value={enteredName}\r\n        />\r\n        {nameInputIsInvalid && (\r\n          <p className=\"errortext\">Name must not empty.</p>\r\n        )}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"street\"\r\n          onChange={streetInputHandler}\r\n          onBlur={streetInputOnblurHandler}\r\n        />\r\n        {streetInputIsInvalid && (\r\n          <p className=\"errortext\">Street must not empty.</p>\r\n        )}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"postalCode\">Postal Code</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postalCode\"\r\n          onChange={postcodeInputHandler}\r\n          onBlur={postcodeInputOnblurHandler}\r\n          value={enteredPostcode}\r\n        />\r\n        {postcodeInputIsInvalid && (\r\n          <p className=\"errortext\">\r\n            Postcode must not empty & should be integer.\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"city\"\r\n          onChange={cityInputHandler}\r\n          onBlur={cityInputOnblurHandler}\r\n          value={enteredCity}\r\n        />\r\n        {cityInputIsInvalid && <p>City must not empty.</p>}\r\n      </div>\r\n      {/* {!enteredInputIsInvalid && <p className=\"error-text\">Input are required.</p>} */}\r\n      <button type=\"button\" onClick={props.onCancel}>\r\n        Cancel\r\n      </button>\r\n      <button disabled={!formIsInvalid}>Confirm</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}