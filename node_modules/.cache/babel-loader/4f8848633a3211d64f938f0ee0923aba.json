{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pare\\\\Development\\\\React\\\\11-FoodOrderApp\\\\src\\\\component\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"../UI/Modal\";\nimport classes from \"./Checkout.module.css\"; // import classes from './Modal.module.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouch, setEnteredNameTouch] = useState(false);\n  const [enteredStreet, setEnteredStreet] = useState(\"\");\n  const [enteredStreetTouch, setEnteredStreetTouch] = useState(false);\n  const [enteredPostal, setEnteredPostal] = useState(\"\");\n  const [enteredCity, setEnteredCity] = useState(\"\"); //   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\" \n  //   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const NameInputIsInvalid = !enteredNameIsValid && enteredNameTouch;\n  const enteredStreenIsValid = enteredStreet.trim() !== '';\n  const StreetInputIsInvalid = !enteredStreenIsValid && enteredStreenIsValid;\n\n  const confirmHandler = event => {\n    event.preventDefault();\n\n    if (!NameInputIsInvalid) {\n      return;\n    }\n  };\n\n  const nameInputHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputOnblurHandler = event => {\n    setEnteredNameTouch(true);\n  };\n\n  const streetInputHanler = event => {\n    setEnteredStreet(event.target.value);\n  };\n\n  const streetInputOnblurHandler = event => {\n    setEnteredStreetTouch(true);\n  };\n\n  const postalInputHanler = event => {\n    setEnteredPostal(event.target.value);\n  };\n\n  const cityInputHanler = event => {\n    setEnteredCity(event.target.value);\n  };\n\n  console.log(NameInputIsInvalid, enteredNameIsValid, enteredNameTouch);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputOnblurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), NameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Name must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetInputHanler,\n        onBlur: streetInputOnblurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), StreetInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Street must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postalCode\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postalCode\",\n        onChange: postalInputHanler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityInputHanler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: props.onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"oGtUeq7fSkB3Zb+unxsNABugUhw=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/component/Cart/Checkout.js"],"names":["useState","Modal","classes","Checkout","props","enteredName","setEnteredName","enteredNameTouch","setEnteredNameTouch","enteredStreet","setEnteredStreet","enteredStreetTouch","setEnteredStreetTouch","enteredPostal","setEnteredPostal","enteredCity","setEnteredCity","enteredNameIsValid","trim","NameInputIsInvalid","enteredStreenIsValid","StreetInputIsInvalid","confirmHandler","event","preventDefault","nameInputHandler","target","value","nameInputOnblurHandler","streetInputHanler","streetInputOnblurHandler","postalInputHanler","cityInputHanler","console","log","control","onCancel"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Modal from \"../UI/Modal\";\r\nimport classes from \"./Checkout.module.css\";\r\n// import classes from './Modal.module.css';\r\n\r\nconst Checkout = (props) => {\r\n  const [enteredName, setEnteredName] = useState(\"\");\r\n  const [enteredNameTouch, setEnteredNameTouch] = useState(false);\r\n  const [enteredStreet, setEnteredStreet] = useState(\"\");\r\n  const [enteredStreetTouch, setEnteredStreetTouch] = useState(false);\r\n  const [enteredPostal, setEnteredPostal] = useState(\"\");\r\n  const [enteredCity, setEnteredCity] = useState(\"\");\r\n\r\n//   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\" \r\n//   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\r\n    const enteredNameIsValid = enteredName.trim() !== '';\r\n    const NameInputIsInvalid = !enteredNameIsValid && enteredNameTouch;\r\n    const enteredStreenIsValid = enteredStreet.trim() !=='';\r\n    const StreetInputIsInvalid = !enteredStreenIsValid && enteredStreenIsValid;\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n    if(!NameInputIsInvalid){\r\n        return;\r\n    }\r\n  };\r\n\r\n  const nameInputHandler = (event) => {\r\n    setEnteredName(event.target.value);\r\n  };\r\n\r\n  const nameInputOnblurHandler = event =>{\r\n    setEnteredNameTouch(true);\r\n  };\r\n\r\n  const streetInputHanler = (event) => {\r\n    setEnteredStreet(event.target.value);\r\n  };\r\n\r\n  const streetInputOnblurHandler = event =>{\r\n    setEnteredStreetTouch(true);\r\n  };\r\n\r\n  const postalInputHanler = (event) => {\r\n    setEnteredPostal(event.target.value);\r\n  };\r\n\r\n  const cityInputHanler = (event) => {\r\n    setEnteredCity(event.target.value);\r\n  };\r\n\r\n  console.log(NameInputIsInvalid,enteredNameIsValid,enteredNameTouch);\r\n  return (\r\n    <form onSubmit={confirmHandler}>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" onChange={nameInputHandler} onBlur={nameInputOnblurHandler}/>\r\n        {NameInputIsInvalid && <p className='errortext'>Name must not empty.</p>}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input type=\"text\" id=\"street\" onChange={streetInputHanler} onBlur={streetInputOnblurHandler}/>\r\n        {StreetInputIsInvalid && <p className='errortext'>Street must not empty.</p>}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"postalCode\">Postal Code</label>\r\n        <input type=\"text\" id=\"postalCode\" onChange={postalInputHanler}/>\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" onChange={cityInputHanler}/>\r\n      </div>\r\n      {/* {!enteredInputIsInvalid && <p className=\"error-text\">Input are required.</p>} */}\r\n      <button type=\"button\" onClick={props.onCancel}>\r\n        Cancel\r\n      </button>\r\n      <button>Confirm</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}