{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pare\\\\Development\\\\React\\\\11-FoodOrderApp\\\\src\\\\component\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"../UI/Modal\";\nimport classes from \"./Checkout.module.css\";\nimport useInput from \"../../hooks/use-input\"; // import classes from './Modal.module.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    inputHasError: NameInputIsInvalid,\n    valueInputHandler: nameInputHandler,\n    valueInputBlurHandler: nameInputOnblurHandler,\n    reset: resetValue\n  } = useInput(value => value.trim() !== ''); //   const [enteredName, setEnteredName] = useState(\"\");\n  //   const [enteredNameTouch, setEnteredNameTouch] = useState(false);\n\n  const [enteredStreet, setEnteredStreet] = useState(\"\");\n  const [enteredStreetTouch, setEnteredStreetTouch] = useState(false);\n  const [enteredPostal, setEnteredPostal] = useState(\"\");\n  const [enteredCity, setEnteredCity] = useState(\"\"); //   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\"\n  //   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\n  //   const enteredNameIsValid = enteredName.trim() !== \"\";\n  //   const NameInputIsInvalid = !enteredNameIsValid && enteredNameTouch;\n\n  const enteredStreetIsValid = enteredStreet.trim() !== \"\";\n  const StreetInputIsInvalid = !enteredStreetIsValid && enteredStreetTouch;\n  let formIsInvalid = true;\n\n  if (NameInputIsInvalid && StreetInputIsInvalid) {\n    formIsInvalid = false;\n  }\n\n  const confirmHandler = event => {\n    event.preventDefault();\n\n    if (!NameInputIsInvalid) {\n      return;\n    }\n\n    resetValue();\n    setEnteredStreet(\"\");\n  }; //   const nameInputHandler = (event) => {\n  //     setEnteredName(event.target.value);\n  //   };\n  //   const nameInputOnblurHandler = (event) => {\n  //     setEnteredNameTouch(true);\n  //   };\n\n\n  const streetInputHanler = event => {\n    setEnteredStreet(event.target.value);\n  };\n\n  const streetInputOnblurHandler = event => {\n    setEnteredStreetTouch(true);\n  };\n\n  const postalInputHanler = event => {\n    setEnteredPostal(event.target.value);\n  };\n\n  const cityInputHanler = event => {\n    setEnteredCity(event.target.value);\n  };\n\n  console.log(NameInputIsInvalid, enteredNameIsValid, enteredNameTouch);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputHandler,\n        onBlur: nameInputOnblurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), NameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Name must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetInputHanler,\n        onBlur: streetInputOnblurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), StreetInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errortext\",\n        children: \"Street must not empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postalCode\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postalCode\",\n        onChange: postalInputHanler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityInputHanler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: props.onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !formIsInvalid,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"FDqONvgjdAyv8jr456i6HL5S9SU=\", false, function () {\n  return [useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/component/Cart/Checkout.js"],"names":["useState","Modal","classes","useInput","Checkout","props","value","enteredName","inputHasError","NameInputIsInvalid","valueInputHandler","nameInputHandler","valueInputBlurHandler","nameInputOnblurHandler","reset","resetValue","trim","enteredStreet","setEnteredStreet","enteredStreetTouch","setEnteredStreetTouch","enteredPostal","setEnteredPostal","enteredCity","setEnteredCity","enteredStreetIsValid","StreetInputIsInvalid","formIsInvalid","confirmHandler","event","preventDefault","streetInputHanler","target","streetInputOnblurHandler","postalInputHanler","cityInputHanler","console","log","enteredNameIsValid","enteredNameTouch","control","onCancel"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Modal from \"../UI/Modal\";\r\nimport classes from \"./Checkout.module.css\";\r\nimport useInput from \"../../hooks/use-input\";\r\n// import classes from './Modal.module.css';\r\n\r\nconst Checkout = (props) => {\r\n  const {\r\n    value: enteredName,\r\n    inputHasError: NameInputIsInvalid,\r\n    valueInputHandler: nameInputHandler,\r\n    valueInputBlurHandler: nameInputOnblurHandler,\r\n    reset: resetValue,\r\n  } = useInput(value => value.trim() !== '');\r\n//   const [enteredName, setEnteredName] = useState(\"\");\r\n//   const [enteredNameTouch, setEnteredNameTouch] = useState(false);\r\n  const [enteredStreet, setEnteredStreet] = useState(\"\");\r\n  const [enteredStreetTouch, setEnteredStreetTouch] = useState(false);\r\n  const [enteredPostal, setEnteredPostal] = useState(\"\");\r\n  const [enteredCity, setEnteredCity] = useState(\"\");\r\n\r\n  //   const enteredInputIsInvalid = enteredName.trim() !== \"\" && enteredStreet.trim() !== \"\"\r\n  //   && enteredPostal.trim() !== '' && enteredCity.trim() !== '';\r\n//   const enteredNameIsValid = enteredName.trim() !== \"\";\r\n//   const NameInputIsInvalid = !enteredNameIsValid && enteredNameTouch;\r\n\r\n  const enteredStreetIsValid = enteredStreet.trim() !== \"\";\r\n  const StreetInputIsInvalid = !enteredStreetIsValid && enteredStreetTouch;\r\n\r\n  let formIsInvalid = true;\r\n  if (NameInputIsInvalid && StreetInputIsInvalid) {\r\n    formIsInvalid = false;\r\n  }\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n    if (!NameInputIsInvalid) {\r\n      return;\r\n    }\r\n    resetValue();\r\n    setEnteredStreet(\"\");\r\n  };\r\n\r\n//   const nameInputHandler = (event) => {\r\n//     setEnteredName(event.target.value);\r\n//   };\r\n\r\n//   const nameInputOnblurHandler = (event) => {\r\n//     setEnteredNameTouch(true);\r\n//   };\r\n\r\n  const streetInputHanler = (event) => {\r\n    setEnteredStreet(event.target.value);\r\n  };\r\n\r\n  const streetInputOnblurHandler = (event) => {\r\n    setEnteredStreetTouch(true);\r\n  };\r\n\r\n  const postalInputHanler = (event) => {\r\n    setEnteredPostal(event.target.value);\r\n  };\r\n\r\n  const cityInputHanler = (event) => {\r\n    setEnteredCity(event.target.value);\r\n  };\r\n\r\n  console.log(NameInputIsInvalid, enteredNameIsValid, enteredNameTouch);\r\n  return (\r\n    <form onSubmit={confirmHandler}>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameInputHandler}\r\n          onBlur={nameInputOnblurHandler}\r\n          value={enteredName}\r\n        />\r\n        {NameInputIsInvalid && (\r\n          <p className=\"errortext\">Name must not empty.</p>\r\n        )}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"street\"\r\n          onChange={streetInputHanler}\r\n          onBlur={streetInputOnblurHandler}\r\n        />\r\n        {StreetInputIsInvalid && (\r\n          <p className=\"errortext\">Street must not empty.</p>\r\n        )}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"postalCode\">Postal Code</label>\r\n        <input type=\"text\" id=\"postalCode\" onChange={postalInputHanler} />\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" onChange={cityInputHanler} />\r\n      </div>\r\n      {/* {!enteredInputIsInvalid && <p className=\"error-text\">Input are required.</p>} */}\r\n      <button type=\"button\" onClick={props.onCancel}>\r\n        Cancel\r\n      </button>\r\n      <button disabled={!formIsInvalid}>Confirm</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}