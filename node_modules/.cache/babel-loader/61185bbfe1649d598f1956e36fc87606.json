{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pare\\\\Development\\\\React\\\\11-FoodOrderApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADDITEM\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; // to check there are any existing menu before by checking from id of item and return index of array\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    console.log(state.items, \"after\");\n    const existingCartItem = state.items[existingCartItemIndex]; // after get index, get that array that already exist put to variable to update value\n\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem; //to update old array with new updated value that've just added\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCart({\n      type: \"ADDITEM\",\n      item: item\n    });\n    console.log(item, \"cartcontext\");\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCart({\n      type: \"REMOVEITEM\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"ZY2kzjH0eT2UJ8xdytMWU1wIqqA=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/Pare/Development/React/11-FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","console","log","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCart","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,UAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MADtD,CAD6B,CAI7B;;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACH,KAAlB,EAAyB,OAAzB;AAEA,UAAMe,gBAAgB,GAAGZ,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB,CAV6B,CAUgC;;AAC7D,QAAIM,YAAJ;;AAEA,QAAID,gBAAJ,EAAsB;AACpB,YAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;AAElBN,QAAAA,MAAM,EAAEM,gBAAgB,CAACN,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAF5B,OAApB;AAIAO,MAAAA,YAAY,GAAG,CAAC,GAAGb,KAAK,CAACH,KAAV,CAAf;AACAgB,MAAAA,YAAY,CAACN,qBAAD,CAAZ,GAAsCO,WAAtC,CANoB,CAM+B;AACpD,KAPD,MAOO;AACLD,MAAAA,YAAY,GAAGb,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAmBd,MAAM,CAACG,IAA1B,CAAf;AACD;;AAED,WAAO;AACLP,MAAAA,KAAK,EAAEgB,YADF;AAELf,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,SAAOP,gBAAP;AACD,CA/BD;;AAiCA,MAAMoB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BzB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAA5C;;AAEA,QAAMwB,oBAAoB,GAAIhB,IAAD,IAAU;AACrCe,IAAAA,YAAY,CAAC;AAAEjB,MAAAA,IAAI,EAAE,SAAR;AAAmBE,MAAAA,IAAI,EAAEA;AAAzB,KAAD,CAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAAkB,aAAlB;AACD,GAHD;;AAKA,QAAMiB,yBAAyB,GAAIZ,EAAD,IAAQ;AACxCU,IAAAA,YAAY,CAAC;AAAEjB,MAAAA,IAAI,EAAE,YAAR;AAAsBO,MAAAA,EAAE,EAAEA;AAA1B,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAMa,WAAW,GAAG;AAClBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADC;AAElBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFL;AAGlByB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBD;;GAAMT,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADDITEM\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    // to check there are any existing menu before by checking from id of item and return index of array\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    console.log(state.items, \"after\");\r\n\r\n    const existingCartItem = state.items[existingCartItemIndex]; // after get index, get that array that already exist put to variable to update value\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem; //to update old array with new updated value that've just added\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCart({ type: \"ADDITEM\", item: item });\r\n    console.log(item, \"cartcontext\");\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCart({ type: \"REMOVEITEM\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}